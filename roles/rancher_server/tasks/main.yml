---
# rancher_server main.yml

- name: Check if rancher container is running
  community.general.docker_container_info:
    name: rancher-server
  register: server_running

- name: Container is already running.
  debug:
    msg: "Rancher Master is already Running"
  when:
    - server_running.exists
    - inventory_hostname in groups['rancher_master']

- block:
    - name: Create rancher persitent data dir
      file:
        path: "{{ rancher_persistent_data_dir }}"
        state: directory
        mode: '0755'

    - name: Start rancher server
      community.general.docker_container:
        container_default_behavior: no_defaults
        name: rancher-server
        image: "rancher/rancher:{{ rancher_version }}"
        privileged: yes
        state: started
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - "{{ rancher_persistent_data_dir }}:/var/lib/rancher"
      register: rancher_server

    - name: "Check Rancher Server {{ rancher_server_url }} accessible from UI"
      uri:
        url: "{{ rancher_server_url }}/healthz"
        validate_certs: no
        follow_redirects: all
      register: http_status
      until: http_status.status == 200
      retries: 10
      delay: 15
      when: rancher_server

    - name: Debug http
      debug:
        msg: "{{ http_status }}"

    - name: Ensure wrong credentials are unauthorized
      uri:
        url: "{{ rancher_server_url }}/{{ rest_version }}-public/localProviders/local?action=login"
        method: POST
        validate_certs: false
        headers:
          Content-Type: "application/json"
        body: '{"username":"admin","password":"admin"}'  # Default Admin password
        body_format: json
        status_code: 401
      ignore_errors: True
      changed_when: False
      register: login

    - name: Debug pass authorize
      debug:
        msg: "{{ login.status }}"

    - name: Set pass to default
      set_fact:
        rpass: "admin"
      when: login.status == 201

    - name: Set pass to newpass
      set_fact:
        rpass: "{{ newPassword }}"
      when: login.status == 401

    - name: Retrieve login data
      uri:
        url: "{{ rancher_server_url }}/{{ rest_version }}-public/localProviders/local?action=login"
        method: POST
        headers:
          Content-Type: "application/json"
        body: '{"username":"admin","password":"{{ rpass }}"}'  # Default Admin password
        body_format: json
        validate_certs: no
        status_code: 201
      register: restdata
      when: http_status.status == 200

    - name: Get loginToken from output
      set_fact:
        loginToken: "{{ restdata.json['token'] | lower }}"
      when: restdata.status == 201

    - name: Debug token
      debug:
        msg: "loginToken -> {{ loginToken }}"

    - name: Reset the Default Admin password
      uri:
        url: "{{ rancher_server_url }}/{{ rest_version }}/users?action=changepassword"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ loginToken }}"
        body: '{"currentPassword":"admin","newPassword":"{{ newPassword }}"}'
        body_format: json
        validate_certs: no
        status_code: 200
      register: resetpass
      when: restdata.status == 201 and login.status != 401

    - name: Create API key
      uri:
        url: "{{ rancher_server_url }}/{{ rest_version }}/token"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ loginToken }}"
        body: '{"type":"token","description":"automation"}'
        body_format: json
        validate_certs: no
        status_code: 201
      register: apitokenRest

    - name: Debug apitokenRest
      debug:
        msg: "{{ apitokenRest }}"
      when: apitokenRest.status == 201

    - name: Get apiToken from output
      set_fact:
        apitoken: "{{ apitokenRest.json['token'] | lower }}"
      when: apitokenRest.status == 201

    - name: Debug apiToken
      debug:
        msg: "apiToken -> {{ apitoken }}"

    - name: "Set Rancher Server URL {{ rancher_server_url }}"
      uri:
        url: "{{ rancher_server_url }}/{{ rest_version }}/settings/server-url"
        method: PUT
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ loginToken }}"
        body: '{"name":"server-url","value":"{{ rancher_server_url }}"}'
        body_format: json
        validate_certs: no
        status_code: 200
      register: reseturl

    - name: Check if helm already exists
      uri:
        url: "{{ rancher_server_url }}/{{ rest_version }}/catalogs"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ loginToken }}"
        body: '{"name":"helm","url":"{{ helm_server_url }}","branch":"{{ helm_branch }}","kind":"helm"}'
        body_format: json
        validate_certs: no
        status_code: 409
      ignore_errors: true
      register: helm

    - name: Enable Helm in catalog
      uri:
        url: "{{ rancher_server_url }}/{{ rest_version }}/catalogs"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ loginToken }}"
        body: '{"name":"helm","url":"{{ helm_server_url }}","branch":"{{ helm_branch }}","kind":"helm"}'
        body_format: json
        validate_certs: no
        status_code: 201
      register: restcatalog
      when: helm.status != 409

  when: "inventory_hostname in groups['rancher_master']"
